/**
 * Configuraci√≥n centralizada de la aplicaci√≥n
 * Usa variables de entorno para mayor flexibilidad
 * 
 * IMPORTANTE: Migraci√≥n al API Gateway
 * - Todas las peticiones ahora pasan por el API Gateway (puerto 80)
 * - Se eliminaron las URLs separadas por servicio (BASE_URL, AUTH_URL)
 * - Ahora existe una sola URL: GATEWAY_URL
 */

import { Platform } from 'react-native';

// === CONFIGURACI√ìN DE ENTORNO ===
export const CONFIG = {
    // Entorno actual
    STAGE: process.env.EXPO_PUBLIC_STAGE || 'dev',
    IS_DEV: process.env.EXPO_PUBLIC_STAGE === 'dev',
    IS_PROD: process.env.EXPO_PUBLIC_STAGE === 'prod',

    // Debug
    DEBUG: process.env.EXPO_DEBUG === 'true',

    // API Gateway - Single point of entry
    API: {
        GATEWAY_URL: getApiGatewayUrl(),
        TIMEOUT: 10000, // 10 segundos
    },

    // Configuraci√≥n de autenticaci√≥n
    AUTH: {
        TOKEN_KEY: 'auth_token',
        REFRESH_TOKEN_KEY: 'refresh_token',
    },

    // Configuraci√≥n de la app
    APP: {
        NAME: 'MediSupply',
        VERSION: '1.0.0',
    }
};

/**
 * Obtiene la URL del API Gateway seg√∫n la plataforma y entorno
 * 
 * FLUJO:
 * 1. En producci√≥n ‚Üí dominio p√∫blico (https://api.medisupply.com)
 * 2. En desarrollo ‚Üí IP local con puerto 80 (API Gateway Nginx)
 * 
 * El API Gateway enruta internamente seg√∫n el path:
 *   - /api/v1/auth/*       ‚Üí auth-service:8004
 *   - /api/v1/users/*      ‚Üí user-service:8001
 *   - /api/v1/validate/*   ‚Üí nit-validation-service:8002
 *   - /api/v1/audits/*     ‚Üí audit-service:8003
 */
function getApiGatewayUrl(): string {
    const stage = process.env.EXPO_PUBLIC_STAGE || 'dev';

    // Producci√≥n - AWS con dominio p√∫blico
    if (stage === 'prod') {
        return process.env.EXPO_PUBLIC_API_GATEWAY_URL || 'https://api.medisupply.com';
    }

    // Desarrollo - Usar URL del API Gateway (puerto 80)
    // La URL var√≠a seg√∫n la plataforma debido a limitaciones de red de emuladores
    switch (Platform.OS) {
        case 'ios':
            // iOS Simulator puede acceder directamente a la IP del host
            return process.env.EXPO_PUBLIC_API_GATEWAY_URL_IOS || 
                   process.env.EXPO_PUBLIC_API_GATEWAY_URL || 
                   'http://192.168.5.107:80';
        
        case 'android':
            // Android Emulator usa IP especial 10.0.2.2 para el localhost del host
            return process.env.EXPO_PUBLIC_API_GATEWAY_URL_ANDROID || 
                   'http://10.0.2.2:80';
        
        case 'web':
            // Web puede usar localhost
            return process.env.EXPO_PUBLIC_API_GATEWAY_URL || 
                   'http://localhost:80';
        
        default:
            return process.env.EXPO_PUBLIC_API_GATEWAY_URL || 
                   'http://localhost:80';
    }
}

/**
 * Utilidad para logging de configuraci√≥n (solo en desarrollo)
 */
export const logConfig = () => {
    if (!CONFIG.IS_DEV && !CONFIG.DEBUG) return;

    console.log('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
    console.log('‚ïë   CONFIGURACI√ìN DE LA APP              ‚ïë');
    console.log('‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£');
    console.log('‚ïë üöÄ Entorno:', CONFIG.STAGE.padEnd(26), '‚ïë');
    console.log('‚ïë üì± Plataforma:', Platform.OS.padEnd(23), '‚ïë');
    console.log('‚ïë üåê API Gateway:'.padEnd(39), '‚ïë');
    console.log('‚ïë   ', CONFIG.API.GATEWAY_URL.padEnd(35), '‚ïë');
    console.log('‚ïë üêõ Debug:', (CONFIG.DEBUG ? 'ON' : 'OFF').padEnd(26), '‚ïë');
    console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù');
};

/**
 * Valida que las variables de entorno requeridas est√©n configuradas
 */
export const validateEnvVars = () => {
    const required = [
        'EXPO_PUBLIC_STAGE'
    ];

    const recommended = [
        'EXPO_PUBLIC_API_GATEWAY_URL'
    ];

    const missing = required.filter(key => !process.env[key]);
    const missingRecommended = recommended.filter(key => !process.env[key]);

    if (missing.length > 0) {
        console.error('‚ùå Variables de entorno REQUERIDAS faltantes:', missing);
    }

    if (missingRecommended.length > 0) {
        console.warn('‚ö†Ô∏è  Variables de entorno RECOMENDADAS faltantes:', missingRecommended);
        console.warn('    Se usar√°n valores por defecto, pero es mejor configurarlas.');
    }

    return {
        isValid: missing.length === 0,
        missing,
        missingRecommended
    };
};

/**
 * Prueba la conectividad con el API Gateway
 * 
 * @param url URL a probar (por defecto usa CONFIG.API.GATEWAY_URL)
 * @returns Promise<boolean> true si la conexi√≥n es exitosa
 */
export const testApiGatewayConnection = async (url?: string): Promise<boolean> => {
    const testUrl = url || CONFIG.API.GATEWAY_URL;
    
    try {
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 5000);

        console.log(`üîç Probando conexi√≥n a API Gateway: ${testUrl}`);

        const response = await fetch(`${testUrl}/health`, {
            method: 'GET',
            signal: controller.signal,
            headers: {
                'Accept': 'application/json',
            },
        });

        clearTimeout(timeoutId);

        if (response.ok) {
            console.log('‚úÖ Conexi√≥n al API Gateway exitosa');
            return true;
        } else {
            console.warn(`‚ö†Ô∏è  API Gateway respondi√≥ con status ${response.status}`);
            return false;
        }
    } catch (error: any) {
        console.error('‚ùå Error conectando al API Gateway:', error.message);
        return false;
    }
};

/**
 * Obtiene informaci√≥n de diagn√≥stico de red
 * √ötil para debugging de problemas de conectividad
 */
export const getNetworkDiagnostics = () => {
    return {
        platform: Platform.OS,
        gatewayUrl: CONFIG.API.GATEWAY_URL,
        stage: CONFIG.STAGE,
        timestamp: new Date().toISOString(),
    };
};

/**
 * MIGRACION: Funciones deprecadas
 * Las siguientes funciones ya NO se usan desde la migraci√≥n al API Gateway
 * Se mantienen comentadas para referencia hist√≥rica
 */

/*
// ‚ùå DEPRECADO - Ya no se usa
function getApiUrl(): string {
    // Apuntaba directamente a user-service:8001
    // Ahora todo pasa por getApiGatewayUrl() en puerto 80
}

// ‚ùå DEPRECADO - Ya no se usa
function getAuthApiUrl(): string {
    // Apuntaba directamente a auth-service:8004
    // Ahora todo pasa por getApiGatewayUrl() en puerto 80
}

// ‚ùå DEPRECADO - Ya no se usa
export const getAndroidFallbackUrls = (): string[] => {
    // Ya no se necesitan URLs de fallback
    // Solo se usa el API Gateway
}

// ‚ùå DEPRECADO - Ya no se usa
export const testApiConnection = async (url: string): Promise<boolean> => {
    // Reemplazado por testApiGatewayConnection()
}
*/

