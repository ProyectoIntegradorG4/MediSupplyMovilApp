/**
 * API Client para Autenticaci√≥n y Registro de Usuarios
 * 
 * IMPORTANTE: API Gateway Migration
 * - Todas las peticiones pasan por el API Gateway (puerto 80)
 * - El gateway enruta seg√∫n el path:
 *   - /api/v1/auth/*  ‚Üí auth-service:8004
 *   - /api/v1/users/* ‚Üí user-service:8001
 * 
 * @module core/auth/api/authApi
 */

import axios from 'axios';
import { SecureStorageAdapter } from '@/helpers/adapters/secure-storage.adapter';
import { CONFIG } from '@/constants/config';

/**
 * Cliente Axios configurado para peticiones de autenticaci√≥n
 * Base URL: API Gateway (puerto 80)
 */
const authApi = axios.create({
  baseURL: CONFIG.API.GATEWAY_URL,
  timeout: CONFIG.API.TIMEOUT,
});

/**
 * Interceptor para agregar token JWT autom√°ticamente a todas las peticiones
 */
authApi.interceptors.request.use(async (config) => {
  const token = await SecureStorageAdapter.getItem('token');

  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }

  return config;
});

/**
 * Interceptor para logging en modo desarrollo
 */
if (CONFIG.DEBUG) {
  authApi.interceptors.request.use((config) => {
    console.log(`üåê [AUTH API] ${config.method?.toUpperCase()} ${config.baseURL}${config.url}`);
    return config;
  });

  authApi.interceptors.response.use(
    (response) => {
      console.log(`‚úÖ [AUTH API] ${response.status} ${response.config.url}`);
      return response;
    },
    (error) => {
      console.error(`‚ùå [AUTH API] ${error.response?.status || 'ERROR'} ${error.config?.url}`);
      return Promise.reject(error);
    }
  );
}

// ========================================
// TIPOS Y INTERFACES
// ========================================

/**
 * Datos para registro de nuevo usuario institucional
 */
export interface RegisterUserData {
  nombre: string;
  email: string;
  nit: string;
  password: string;
}

/**
 * Respuesta del endpoint de registro
 */
export interface RegisterUserResponse {
  mensaje: string;
  usuario_id: number;
  email: string;
  token: string;
}

/**
 * Datos para login
 */
export interface LoginData {
  email: string;
  password: string;
}

/**
 * Respuesta del endpoint de login
 */
export interface LoginResponse {
  access_token: string;
  token_type: string;
  user_id: number;
  email: string;
  roles: string[];
}

/**
 * Respuesta del endpoint de verificaci√≥n de token
 */
export interface VerifyTokenResponse {
  valid: boolean;
  user_id: number;
  email: string;
  roles: string[];
}

/**
 * Estructura de errores de validaci√≥n de FastAPI (422)
 */
export interface APIValidationError {
  detail: Array<{
    loc: string[];
    msg: string;
    type: string;
  }>;
}

/**
 * Estructura de errores del servicio de usuarios
 */
export interface UserServiceError {
  error: string;
  detalles: {
    campo?: string;
    message?: string;
    [key: string]: any;
  };
}

// ========================================
// FUNCIONES DE API
// ========================================

/**
 * Registra un nuevo usuario institucional
 * 
 * Endpoint: POST /api/v1/users/register
 * Gateway enruta a: user-service:8001
 * 
 * Validaciones del backend:
 * - Email √∫nico
 * - NIT v√°lido y autorizado
 * - Contrase√±a con complejidad requerida (8+ chars, may√∫sculas, min√∫sculas, n√∫meros, s√≠mbolos)
 * 
 * @param userData Datos del usuario a registrar
 * @returns Respuesta con ID de usuario y token JWT
 * @throws Error con detalles de validaci√≥n si falla
 */
export const registerUser = async (userData: RegisterUserData): Promise<RegisterUserResponse> => {
  const { data } = await authApi.post<RegisterUserResponse>('/api/v1/users/register', userData);
  return data;
};

/**
 * Inicia sesi√≥n con email y contrase√±a
 * 
 * Endpoint: POST /api/v1/auth/login
 * Gateway enruta a: auth-service:8004
 * 
 * @param credentials Email y contrase√±a del usuario
 * @returns Token de acceso y datos del usuario
 * @throws Error si credenciales son inv√°lidas
 */
export const login = async (credentials: LoginData): Promise<LoginResponse> => {
  const { data } = await authApi.post<LoginResponse>('/api/v1/auth/login', credentials);
  return data;
};

/**
 * Verifica la validez de un token JWT
 * 
 * Endpoint: GET /api/v1/auth/verify-token
 * Gateway enruta a: auth-service:8004
 * 
 * @param token Token JWT a verificar
 * @returns Informaci√≥n del usuario si el token es v√°lido
 * @throws Error si el token es inv√°lido o expir√≥
 */
export const verifyToken = async (token: string): Promise<VerifyTokenResponse> => {
  const { data } = await authApi.get<VerifyTokenResponse>(`/api/v1/auth/verify-token`, {
    params: { token }
  });
  return data;
};

/**
 * Cierra sesi√≥n (logout)
 * 
 * Endpoint: POST /api/v1/auth/logout
 * Gateway enruta a: auth-service:8004
 * 
 * Nota: Tambi√©n debe limpiar el token almacenado localmente
 */
export const logout = async (): Promise<void> => {
  try {
    await authApi.post('/api/v1/auth/logout');
  } finally {
    // Limpiar token local siempre, incluso si el servidor falla
    await SecureStorageAdapter.removeItem('token');
  }
};

// ========================================
// UTILIDADES DE MANEJO DE ERRORES
// ========================================

/**
 * Formatea errores de validaci√≥n de FastAPI (422)
 * 
 * Convierte el array de errores en un objeto campo ‚Üí mensaje
 * 
 * @param errors Array de errores de validaci√≥n
 * @returns Objeto con campos como keys y mensajes de error como values
 */
export const formatValidationErrors = (errors: APIValidationError['detail']): Record<string, string> => {
  const formatted: Record<string, string> = {};
  
  errors.forEach(error => {
    // El campo est√° en la √∫ltima posici√≥n del array 'loc'
    const field = error.loc[error.loc.length - 1];
    formatted[field] = error.msg;
  });
  
  return formatted;
};

/**
 * Formatea errores del servicio de usuarios
 * 
 * Extrae el campo y mensaje de error de la estructura del backend
 * 
 * @param error Error estructurado del servicio
 * @returns Objeto con campos como keys y mensajes de error como values
 */
export const formatUserServiceErrors = (error: UserServiceError): Record<string, string> => {
  const formatted: Record<string, string> = {};
  
  if (error.detalles?.campo) {
    formatted[error.detalles.campo] = error.detalles.message || error.error;
  } else {
    // Error gen√©rico sin campo espec√≠fico
    formatted['_general'] = error.error;
  }
  
  return formatted;
};

/**
 * Extrae mensaje de error legible desde una respuesta de error de Axios
 * 
 * @param error Error de Axios
 * @returns Mensaje de error legible para mostrar al usuario
 */
export const extractErrorMessage = (error: any): string => {
  // Error de red o timeout
  if (!error.response) {
    if (error.code === 'NETWORK_ERROR' || error.message?.includes('Network Error')) {
      return 'No se pudo conectar al servidor. Verifica tu conexi√≥n a internet.';
    }
    if (error.code === 'ECONNABORTED' || error.message?.includes('timeout')) {
      return 'La conexi√≥n tard√≥ demasiado. Por favor intenta nuevamente.';
    }
    return 'Error de conexi√≥n. Por favor intenta nuevamente.';
  }

  const errorData = error.response.data;

  // Error estructurado del servicio de usuarios
  if (errorData.error && errorData.detalles) {
    return errorData.detalles.message || errorData.error;
  }

  // Error de validaci√≥n FastAPI (422)
  if (error.response.status === 422 && errorData.detail) {
    return 'Por favor corrige los errores en el formulario.';
  }

  // Error con mensaje directo
  if (typeof errorData === 'string') {
    return errorData;
  }

  if (errorData.message) {
    return errorData.message;
  }

  if (errorData.detail && typeof errorData.detail === 'string') {
    return errorData.detail;
  }

  // Error gen√©rico seg√∫n status code
  switch (error.response.status) {
    case 400:
      return 'Los datos enviados son inv√°lidos.';
    case 401:
      return 'Credenciales inv√°lidas. Por favor verifica tu email y contrase√±a.';
    case 403:
      return 'No tienes permiso para realizar esta acci√≥n.';
    case 404:
      return 'El recurso solicitado no fue encontrado.';
    case 409:
      return 'Ya existe un usuario con este email.';
    case 422:
      return 'Los datos no cumplen con los requisitos.';
    case 500:
      return 'Error interno del servidor. Por favor intenta m√°s tarde.';
    default:
      return 'Ocurri√≥ un error inesperado. Por favor intenta nuevamente.';
  }
};

export { authApi };

